package de.unibremen.swp2.controller;import de.unibremen.swp2.model.*;import de.unibremen.swp2.persistence.Exceptions.EntityNotFoundException;import de.unibremen.swp2.persistence.Exceptions.HasEvaluationsException;import de.unibremen.swp2.persistence.Exceptions.MeetingNotFoundException;import de.unibremen.swp2.persistence.Exceptions.OutdatedException;import de.unibremen.swp2.service.*;import lombok.Getter;import lombok.Setter;import net.vidageek.mirror.dsl.Mirror;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.Mockito;import org.mockito.junit.jupiter.MockitoExtension;import javax.faces.annotation.RequestParameterMap;import javax.faces.context.ExternalContext;import javax.faces.context.FacesContext;import javax.inject.Inject;import javax.persistence.NoResultException;import java.io.IOException;import java.security.Principal;import java.util.List;import java.util.Map;import static org.mockito.Mockito.*;import static org.junit.jupiter.api.Assertions.*;@ExtendWith(MockitoExtension.class)class MeetingBeanTest{    @Mock    private Meeting meeting;    @Mock    private List<ParticipantWithStatus> participants;    @Mock    private List<ParticipantWithStatus> filteredParticipants;    @Mock    private List<Submission> submissions;    @Mock    private List<Tutorial> tutorials;    @Mock    private List<Tutorial> filteredTutorials;    @Mock    private List<UserWithRole> users;    @Mock    private List<UserWithRole> filteredUsers;    @Mock    private List<Exam> exams;    @Mock    private Principal principal;    @Mock    private UserService userService;    @Mock    private MeetingService meetingService;    @Mock    private SubmissionService submissionService;    @Mock    private ParticipantService participantService;    @Mock    private TutorialService tutorialService;    @Mock    private ExternalContext externalContext;    @Mock    private ExamService examService;    @Mock    private FacesContext facesContext;    @InjectMocks    MeetingBean meetingBean;    @Mock    @RequestParameterMap    private Map<String, String> parameterMap;    @Test    void initTestUserRoleA () {        String  value= "819cb31c-3b38-4706-b3d5-b7235e59df99";        parameterMap.put("meeting-Id",value);        Meeting meeting2 = new Meeting();        when(meetingService.getById(value)).thenReturn(meeting2);        when(parameterMap.get(anyString())).thenReturn(value);        User user = new User();        user.setRole(Role.A);        when( userService.getUsersByEmail(principal.getName())).thenReturn(user);        new Mirror().on(meetingBean).invoke().method("init").withoutArgs();        verify(meetingService, times(1)).getById(value);        verify(parameterMap, times(1)).get(anyString());    }    @Test    void initTestUserRole () {        String  value= "819cb31c-3b38-4706-b3d5-b7235e59df99";        parameterMap.put("meeting-Id",value);        Meeting meeting2 = new Meeting();        when(meetingService.getById(value)).thenReturn(meeting2);        when(parameterMap.get(anyString())).thenReturn(value);        User user1 = new User();        when( userService.getUsersByEmail(principal.getName())).thenReturn(user1);        UserMeetingRole userMeetingRole = new UserMeetingRole();        when( userService.getUserMeetingRoleByUserAndMeeting(any(), any())).thenReturn(userMeetingRole);        new Mirror().on(meetingBean).invoke().method("init").withoutArgs();        verify(meetingService, times(1)).getById(value);        verify(parameterMap, times(1)).get(anyString());        doThrow(new NoResultException()).when(userService).getUserMeetingRoleByUserAndMeeting(any(), any());        new Mirror().on(meetingBean).invoke().method("init").withoutArgs();        verify(userService, times(2)).getUserMeetingRoleByUserAndMeeting(any(), any());    }    @Test    void setMeetingNameTest () throws EntityNotFoundException, OutdatedException    {        String name = "Meetings name";        doNothing().when(meeting).setName(name);        doNothing().when(meetingService).updateMeetingOnly(meeting);        Meeting m = new Meeting();        when(meetingService.getById(meeting.getId())).thenReturn(m);        meetingBean.setMeetingName(name);        verify(meeting, times(1)).setName(name);        verify(meetingService, times(1)).updateMeetingOnly(meeting);        verify(meetingService, times(1)).getById(meeting.getId());    }    @Test    void setMeetingNameTestAllExeptions () throws EntityNotFoundException, OutdatedException    {        String name = "Meetings name";        doThrow(new EntityNotFoundException()).when(meetingService).updateMeetingOnly(meeting);        meetingBean.setMeetingName(name);        doThrow(new OutdatedException()).when(meetingService).updateMeetingOnly(meeting);        meetingBean.setMeetingName(name);        verify(meeting, times(2)).setName(name);        verify(meetingService, times(2)).updateMeetingOnly(meeting);        verify(facesContext, times(2)).addMessage(isNull(), notNull());    }    @Test    void deleteMeetingTest() throws HasEvaluationsException, IOException    {        doNothing().when(meetingService).delete(any());        meetingBean.deleteMeeting();        verify(meetingService, times(1)).delete(any());        doThrow(new HasEvaluationsException()).when(meetingService).delete(any());        meetingBean.deleteMeeting();        verify(meetingService, times(2)).delete(any());    }    @Test    void deleteExam() throws EntityNotFoundException, HasEvaluationsException    {        Exam exam= Mockito.mock(Exam.class);        doNothing().when(examService).delete(exam);        when(exams.remove(exam)).thenReturn(true);        meetingBean.deleteExam(exam);        verify(exams, times(1)).remove(exam);        verify(examService, times(1)).delete(exam);    }    @Test    void deleteExamAllExeptions () throws EntityNotFoundException, HasEvaluationsException    {        Exam exam= Mockito.mock(Exam.class);        doThrow(new HasEvaluationsException()).when(examService).delete(exam);        meetingBean.deleteExam(exam);        doThrow(new EntityNotFoundException()).when(examService).delete(exam);        meetingBean.deleteExam(exam);        verify(examService, times(2)).delete(exam);        verify(facesContext, times(2)).addMessage(isNull(), notNull());    }    @Test    void onItemSelectedListener () throws EntityNotFoundException, OutdatedException    {         ParticipantWithStatus participant = new ParticipantWithStatus( new Participant(),                                                                        new ParticipantStatus());         doNothing().when(participantService).updateParticipantStatus(any());         ParticipantStatus updated = new ParticipantStatus();         when( participantService.getParticipantStatusById(any())).thenReturn(updated);         meetingBean.onItemSelectedListener(participant);        verify(participantService, times(1)).updateParticipantStatus(any());        verify(participantService, times(1)).getParticipantStatusById(any());    }    @Test    void onItemSelectedListenerAllExeptions () throws EntityNotFoundException, OutdatedException    {        ParticipantWithStatus participant = Mockito.mock(ParticipantWithStatus.class);        ParticipantStatus ps = Mockito.mock(ParticipantStatus.class);        participant.setMeetingStatus( ps);        doThrow(new EntityNotFoundException()).when(participantService).updateParticipantStatus(any());        meetingBean.onItemSelectedListener(participant);        doThrow(new OutdatedException()).when(participantService).updateParticipantStatus(any());        meetingBean.onItemSelectedListener(participant);        verify(participantService, times(2)).updateParticipantStatus(any());        verify(facesContext, times(2)).addMessage(isNull(), notNull());    }}